/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package inventoryproject;
import inventoryproject.C.Product;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.Window;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;
/**
 *
 * @author kune
 */

public class Receipt extends javax.swing.JFrame { // Receipt class to generate and display receipts.

    /**
     * Creates new form Receipt
     */
    public Receipt(){
        initComponents();
        setResizable(false);// Disable user from resizing the window
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollBar1 = new javax.swing.JScrollBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        textArea.setEditable(false);
        textArea.setBackground(new java.awt.Color(255, 255, 255));
        textArea.setColumns(20);
        textArea.setRows(5);
        textArea.setFocusable(false);
        jScrollPane1.setViewportView(textArea);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 530, 640));

        pack();
    }// </editor-fold>//GEN-END:initComponents

        private ArrayList<Product> orderedList; // ArrayList to store ordered products
        
        private long receiptNo = 0; // Variable to hold the receipt number
        
        double cash = 0; // Variable to store the cash amount paid
        
        StringBuilder receiptText = new StringBuilder(); // StringBuilder to construct the receipt text
        
        /**
        * Constructor for Receipt class.
        * Initializes the receipt window with ordered products and cash amount.
        * @param x List of ordered products
        * @param cash Amount paid
        * @throws IOException Handles input/output exceptions
        */
        public Receipt(ArrayList<Product> x, double cash) throws IOException {
            initComponents();
            orderedList = x;    // Set the list of ordered products
            this.cash = cash;   // Set the amount of cash paid
            System.out.println(orderedList.size());
            readReceiptNo();    // Read and set the receipt number
            printReceipt();     // Generate and display the receipt
        }
         /**
        * Reads and increments the receipt number stored in a file.
        * If the file doesn't exist or encounters an error, it sets the receipt number to 1.
        * @throws IOException Handles input/output exceptions
        */
        private void readReceiptNo() throws IOException {
            try{
                File receiptNoFile = new File("src/inventoryproject/C/receiptNo.in");

                if(receiptNoFile.length() == 0){      // Check if the file exists and is empty
                    boolean catchBoolean = receiptNoFile.createNewFile();   // If the file is empty, create it and set the receipt number to 1
                    receiptNo = 1;
                }
                else{
                    Scanner read = new Scanner(receiptNoFile);  // If the file exists, read the stored receipt number
                    receiptNo = Long.parseLong(read.nextLine());
                    read.close();
                }

                new FileWriter(receiptNoFile, false).close(); // Clear the content of the file

                ++receiptNo;    // Increment the receipt number
                
                // Write the updated receipt number back to the file
                FileWriter writer = new FileWriter(receiptNoFile);
                writer.write(receiptNo + "\n");
                writer.close();
            }
            catch (IOException e){
                // If an exception occurs, set the receipt number to 1 and create a new file
                receiptNo = 1;
                new FileWriter("src/inventoryproject/C/receiptNo.in", false).close();

                FileWriter writer = new FileWriter("receiptNo.in");
                writer.write(receiptNo + "\n");
                writer.close();
            }
        }
        
        /**
        * Generates the text for the receipt and displays it in the text area of the GUI.
        */
        private void  printReceipt(){
            
        double change = 0;
        double total = 0;   // Variable to store the total price of the products
        
        // Formatting of date and time
        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy hh:mm a");  //generate a date and time data
        Date dateAndTime = new Date();  //related to date and time
        
        // Appending header and basic information to the receipt text
        receiptText.append("\n***********************************************************************************************************\n                                                                          Momentum\n                                                                       Bicol University\n                                                         Rizal Street Legazpi City, Albay\n\n").append(String.format(" RECEIPT NO.:      %014d\n", receiptNo)).append(" DATE:             ").append(sdf.format(dateAndTime)).append("\n**********************************************************************************************************\n").append( "   PRODUCT NAME   |        TYPE        |         QUANTITY         |         PRICE        |   TOTAL PRICE\n").append("**********************************************************************************************************\n");
        
        // Loop through ordered products to add details to the receipt text
        for(Product c: orderedList){
            if(c.getName().length() > 7)
                receiptText.append("             ").append(String.format(c.getName()).substring(0, 9)).append("...");
            else
                receiptText.append(String.format("    %28s", c.getName()));

            if(c.getType().length() > 10)
                receiptText.append("      ").append(String.format(c.getType()).substring(0, 7)).append("... ");
            else
                receiptText.append(String.format("   %17s", c.getType()));


            receiptText.append(String.format("               %8d", c.getAmount()));
            receiptText.append(String.format("                       %7.2f", c.getPrice()));
            receiptText.append(String.format("                %11.2f\n", c.getPrice() * c.getAmount()));
            
            total += c.getPrice() * c.getAmount();   // Calculating the total price
        }
        // Appending total, cash, change, and closing remarks to the receipt text
        receiptText.append("**********************************************************************************************************\n").append(String.format("TOTAL:   %12.2f\n\n", total)).append(String.format("CASH:    %12.2f\n", cash)).append(String.format("CHANGE:  %12.2f\n\n", cash - total)).append("***********************************************************************************************************\n***********************************************************************************************************\n\n                                             THANK YOU FOR SHOPPING WITH US!\n\n\n");
        
        textArea.setText(""+receiptText);   // Set the constructed receipt text in the text area of the GUI
    }
        
        //for centering the the window
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Receipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Receipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Receipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Receipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Receipt().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}

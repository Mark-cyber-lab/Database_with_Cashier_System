/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package inventoryproject;

import inventoryproject.C.ProcessProductData;
import javax.swing.table.DefaultTableModel;
import java.util.Hashtable;
import inventoryproject.C.Product;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.Window;
import javax.swing.JOptionPane;
import java.io.IOException;
import javax.swing.JTable;

/**
 *
 * @author NEC
 */
public class Inventory extends javax.swing.JFrame {

    /**
     * Creates new form Inventory
     */
    //the holders of the datas, used in the caching
    long UPC = 0;
    byte category = 0;
    String brandName = "";
    String type = "";
    String name = "";
    double price = 0;
    long amount = 0;
    
    public ProcessProductData processProductDataObject = new ProcessProductData();  //instantiates the process of the product in order to use its method
    
    public Inventory() {
        initComponents();
        processProductDataObject.prepareStocks();   //reads the stocks stored in the file
        setTheAllTables();  //sets all the value in the table
        centerWindow(this); //puts the window in the center
        setResizable(false);//disable user to resize window
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inventoryMain = new javax.swing.JPanel();
        inventoryLbl1 = new javax.swing.JLabel();
        inventoryAddBtn1 = new javax.swing.JButton();
        inventoryDeleteBtn1 = new javax.swing.JButton();
        inventoryUpdateBtn1 = new javax.swing.JButton();
        inventorySearchUPCLbl1 = new javax.swing.JLabel();
        inventorySearchUPCTxtField1 = new javax.swing.JTextField();
        inventoryCategoryComboBox1 = new javax.swing.JComboBox<>();
        inventoryLayeredPane1 = new javax.swing.JLayeredPane();
        all = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        BodySystems = new javax.swing.JPanel();
        jScrollPane16 = new javax.swing.JScrollPane();
        jTable7 = new javax.swing.JTable();
        VehicleSecurityAndSafety = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable9 = new javax.swing.JTable();
        SpecialPurposeVechiclePartsAndAccessories = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTable10 = new javax.swing.JTable();
        EntertainmentAndCommunicationSystems = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTable13 = new javax.swing.JTable();
        CarCaresAndRepairEquipment = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        jTable14 = new javax.swing.JTable();
        VehiclePartsManufacturing = new javax.swing.JPanel();
        jScrollPane14 = new javax.swing.JScrollPane();
        jTable15 = new javax.swing.JTable();
        EngineSystems = new javax.swing.JPanel();
        jScrollPane15 = new javax.swing.JScrollPane();
        jTable16 = new javax.swing.JTable();
        PowerTansmissionSystems = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable8 = new javax.swing.JTable();
        inventoryLogo1 = new javax.swing.JLabel();
        inventoryBackBtn1 = new javax.swing.JLabel();
        seeDetails = new javax.swing.JButton();
        save = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        inventoryAdd = new javax.swing.JPanel();
        inventoryAddBackBtn = new javax.swing.JLabel();
        inventoryAddLbl = new javax.swing.JLabel();
        inventoryAddBrandNameLbl = new javax.swing.JLabel();
        inventoryAddBrandNameTxtField = new javax.swing.JTextField();
        inventoryAddQuantityLbl = new javax.swing.JLabel();
        inventoryAddNameLbl = new javax.swing.JLabel();
        inventoryAddTypeLbl = new javax.swing.JLabel();
        inventoryAddUPCLbl = new javax.swing.JLabel();
        inventoryAddPriceTxtField = new javax.swing.JTextField();
        inventoryAddPriceLbl = new javax.swing.JLabel();
        inventoryAddBtn = new javax.swing.JButton();
        inventoryAddCategoryLbl = new javax.swing.JLabel();
        inventoryAddUPCTxtField = new javax.swing.JTextField();
        inventoryAddCategoryComboBox = new javax.swing.JComboBox<>();
        inventoryAddQuantityTxtField = new javax.swing.JTextField();
        inventoryAddNameTxtField = new javax.swing.JTextField();
        inventoryAddTypeTxtField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        inventoryUpdate = new javax.swing.JPanel();
        inventoryUpdateBackBtn = new javax.swing.JLabel();
        inventoryUpdateLbl = new javax.swing.JLabel();
        inventoryUpdateBrandNameLbl = new javax.swing.JLabel();
        inventoryUpdateBrandNameTxtField = new javax.swing.JTextField();
        inventoryUpdateQuantityLbl = new javax.swing.JLabel();
        inventoryUpdateNameLbl = new javax.swing.JLabel();
        inventoryUpdateTypeLbl = new javax.swing.JLabel();
        inventoryUpdateUPCLbl = new javax.swing.JLabel();
        inventoryUpdatePriceTxtField = new javax.swing.JTextField();
        inventoryUpdatePriceLbl = new javax.swing.JLabel();
        inventoryUpdateBtn = new javax.swing.JButton();
        inventoryUpdateCategoryLbl = new javax.swing.JLabel();
        inventoryUpdateUPCTxtField = new javax.swing.JTextField();
        inventoryUpdateCategoryComboBox = new javax.swing.JComboBox<>();
        inventoryUpdateQuantityTxtField = new javax.swing.JTextField();
        inventoryUpdateUpdateNameTxtField = new javax.swing.JTextField();
        inventoryUpdateTypeTxtField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        seeProductDetails = new javax.swing.JPanel();
        inventoryAddBackBtn1 = new javax.swing.JLabel();
        inventoryAddLbl1 = new javax.swing.JLabel();
        inventoryAddBrandNameLbl1 = new javax.swing.JLabel();
        inventoryAddQuantityLbl1 = new javax.swing.JLabel();
        inventoryAddNameLbl1 = new javax.swing.JLabel();
        inventoryAddTypeLbl1 = new javax.swing.JLabel();
        inventoryAddUPCLbl1 = new javax.swing.JLabel();
        inventoryAddPriceLbl1 = new javax.swing.JLabel();
        inventoryAddCategoryLbl1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        seeUPC = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        seeBrandName = new javax.swing.JTextPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        seeType = new javax.swing.JTextPane();
        jScrollPane17 = new javax.swing.JScrollPane();
        seeName = new javax.swing.JTextPane();
        jScrollPane18 = new javax.swing.JScrollPane();
        seePrice = new javax.swing.JTextPane();
        jScrollPane19 = new javax.swing.JScrollPane();
        seeAmount = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        seeCategory = new javax.swing.JTextPane();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Momentum - Inventory");
        getContentPane().setLayout(new java.awt.CardLayout());

        inventoryMain.setBackground(new java.awt.Color(223, 223, 223));
        inventoryMain.setToolTipText("");
        inventoryMain.setMinimumSize(new java.awt.Dimension(1098, 651));
        inventoryMain.setPreferredSize(new java.awt.Dimension(1098, 651));
        inventoryMain.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        inventoryLbl1.setFont(new java.awt.Font("Poppins", 1, 24)); // NOI18N
        inventoryLbl1.setForeground(new java.awt.Color(255, 255, 255));
        inventoryLbl1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        inventoryLbl1.setText("Inventory");
        inventoryMain.add(inventoryLbl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 90, -1, 25));

        inventoryAddBtn1.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        inventoryAddBtn1.setText("Add");
        inventoryAddBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inventoryAddBtn1ActionPerformed(evt);
            }
        });
        inventoryMain.add(inventoryAddBtn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 180, 106, 40));

        inventoryDeleteBtn1.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        inventoryDeleteBtn1.setText("Delete");
        inventoryDeleteBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inventoryDeleteBtn1ActionPerformed(evt);
            }
        });
        inventoryMain.add(inventoryDeleteBtn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 240, 106, 40));

        inventoryUpdateBtn1.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        inventoryUpdateBtn1.setText("Update");
        inventoryUpdateBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inventoryUpdateBtn1ActionPerformed(evt);
            }
        });
        inventoryMain.add(inventoryUpdateBtn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 300, 106, 40));

        inventorySearchUPCLbl1.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        inventorySearchUPCLbl1.setForeground(new java.awt.Color(255, 255, 255));
        inventorySearchUPCLbl1.setText("Search for UPC:");
        inventoryMain.add(inventorySearchUPCLbl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 136, 90, 30));

        inventorySearchUPCTxtField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inventorySearchUPCTxtField1ActionPerformed(evt);
            }
        });
        inventoryMain.add(inventorySearchUPCTxtField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 140, 195, -1));

        inventoryCategoryComboBox1.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        inventoryCategoryComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Engine Systems", "Body Systems", "Power-Tansmission Systems", "Vehicle Security and Safety", "Special Purpose Vechicle Parts and Accessories", "Entertainment and Communication Systems", "Car Cares and Repair Equipment", "Vehicle Parts Manufacturing" }));
        inventoryCategoryComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inventoryCategoryComboBox1ActionPerformed(evt);
            }
        });
        inventoryMain.add(inventoryCategoryComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 140, 296, -1));

        inventoryLayeredPane1.setLayout(new java.awt.CardLayout());

        all.setBackground(new java.awt.Color(223, 223, 223));

        jTable6.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UPC", "Category no.", "Brand", "Type", "Product Name", "Quantity", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTable6);

        javax.swing.GroupLayout allLayout = new javax.swing.GroupLayout(all);
        all.setLayout(allLayout);
        allLayout.setHorizontalGroup(
            allLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, allLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 748, Short.MAX_VALUE)
                .addContainerGap())
        );
        allLayout.setVerticalGroup(
            allLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(allLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        inventoryLayeredPane1.add(all, "card2");

        BodySystems.setBackground(new java.awt.Color(223, 223, 223));

        jTable7.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jTable7.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UPC", "Category no.", "Brand", "Type", "Product Name", "Quantity", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane16.setViewportView(jTable7);

        javax.swing.GroupLayout BodySystemsLayout = new javax.swing.GroupLayout(BodySystems);
        BodySystems.setLayout(BodySystemsLayout);
        BodySystemsLayout.setHorizontalGroup(
            BodySystemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BodySystemsLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jScrollPane16, javax.swing.GroupLayout.DEFAULT_SIZE, 748, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );
        BodySystemsLayout.setVerticalGroup(
            BodySystemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BodySystemsLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jScrollPane16, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );

        inventoryLayeredPane1.add(BodySystems, "card2");

        VehicleSecurityAndSafety.setBackground(new java.awt.Color(223, 223, 223));

        jTable9.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jTable9.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UPC", "Category no.", "Brand", "Type", "Product Name", "Quantity", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(jTable9);

        javax.swing.GroupLayout VehicleSecurityAndSafetyLayout = new javax.swing.GroupLayout(VehicleSecurityAndSafety);
        VehicleSecurityAndSafety.setLayout(VehicleSecurityAndSafetyLayout);
        VehicleSecurityAndSafetyLayout.setHorizontalGroup(
            VehicleSecurityAndSafetyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, VehicleSecurityAndSafetyLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 748, Short.MAX_VALUE)
                .addContainerGap())
        );
        VehicleSecurityAndSafetyLayout.setVerticalGroup(
            VehicleSecurityAndSafetyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(VehicleSecurityAndSafetyLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                .addContainerGap())
        );

        inventoryLayeredPane1.add(VehicleSecurityAndSafety, "card2");

        SpecialPurposeVechiclePartsAndAccessories.setBackground(new java.awt.Color(223, 223, 223));

        jTable10.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jTable10.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UPC", "Category no.", "Brand", "Type", "Product Name", "Quantity", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane11.setViewportView(jTable10);

        javax.swing.GroupLayout SpecialPurposeVechiclePartsAndAccessoriesLayout = new javax.swing.GroupLayout(SpecialPurposeVechiclePartsAndAccessories);
        SpecialPurposeVechiclePartsAndAccessories.setLayout(SpecialPurposeVechiclePartsAndAccessoriesLayout);
        SpecialPurposeVechiclePartsAndAccessoriesLayout.setHorizontalGroup(
            SpecialPurposeVechiclePartsAndAccessoriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SpecialPurposeVechiclePartsAndAccessoriesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 748, Short.MAX_VALUE)
                .addContainerGap())
        );
        SpecialPurposeVechiclePartsAndAccessoriesLayout.setVerticalGroup(
            SpecialPurposeVechiclePartsAndAccessoriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SpecialPurposeVechiclePartsAndAccessoriesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                .addContainerGap())
        );

        inventoryLayeredPane1.add(SpecialPurposeVechiclePartsAndAccessories, "card2");

        EntertainmentAndCommunicationSystems.setBackground(new java.awt.Color(223, 223, 223));

        jTable13.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jTable13.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UPC", "Category no.", "Brand", "Type", "Product Name", "Quantity", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane12.setViewportView(jTable13);

        javax.swing.GroupLayout EntertainmentAndCommunicationSystemsLayout = new javax.swing.GroupLayout(EntertainmentAndCommunicationSystems);
        EntertainmentAndCommunicationSystems.setLayout(EntertainmentAndCommunicationSystemsLayout);
        EntertainmentAndCommunicationSystemsLayout.setHorizontalGroup(
            EntertainmentAndCommunicationSystemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EntertainmentAndCommunicationSystemsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 748, Short.MAX_VALUE)
                .addContainerGap())
        );
        EntertainmentAndCommunicationSystemsLayout.setVerticalGroup(
            EntertainmentAndCommunicationSystemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EntertainmentAndCommunicationSystemsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                .addContainerGap())
        );

        inventoryLayeredPane1.add(EntertainmentAndCommunicationSystems, "card2");

        CarCaresAndRepairEquipment.setBackground(new java.awt.Color(223, 223, 223));

        jTable14.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jTable14.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UPC", "Category no.", "Brand", "Type", "Product Name", "Quantity", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane13.setViewportView(jTable14);

        javax.swing.GroupLayout CarCaresAndRepairEquipmentLayout = new javax.swing.GroupLayout(CarCaresAndRepairEquipment);
        CarCaresAndRepairEquipment.setLayout(CarCaresAndRepairEquipmentLayout);
        CarCaresAndRepairEquipmentLayout.setHorizontalGroup(
            CarCaresAndRepairEquipmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CarCaresAndRepairEquipmentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 748, Short.MAX_VALUE)
                .addContainerGap())
        );
        CarCaresAndRepairEquipmentLayout.setVerticalGroup(
            CarCaresAndRepairEquipmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CarCaresAndRepairEquipmentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                .addContainerGap())
        );

        inventoryLayeredPane1.add(CarCaresAndRepairEquipment, "card2");

        VehiclePartsManufacturing.setBackground(new java.awt.Color(223, 223, 223));

        jTable15.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jTable15.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UPC", "Category no.", "Brand", "Type", "Product Name", "Quantity", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane14.setViewportView(jTable15);

        javax.swing.GroupLayout VehiclePartsManufacturingLayout = new javax.swing.GroupLayout(VehiclePartsManufacturing);
        VehiclePartsManufacturing.setLayout(VehiclePartsManufacturingLayout);
        VehiclePartsManufacturingLayout.setHorizontalGroup(
            VehiclePartsManufacturingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, VehiclePartsManufacturingLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 748, Short.MAX_VALUE)
                .addContainerGap())
        );
        VehiclePartsManufacturingLayout.setVerticalGroup(
            VehiclePartsManufacturingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(VehiclePartsManufacturingLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                .addContainerGap())
        );

        inventoryLayeredPane1.add(VehiclePartsManufacturing, "card2");

        EngineSystems.setBackground(new java.awt.Color(223, 223, 223));

        jTable16.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jTable16.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UPC", "Category no.", "Brand", "Type", "Product Name", "Quantity", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane15.setViewportView(jTable16);

        javax.swing.GroupLayout EngineSystemsLayout = new javax.swing.GroupLayout(EngineSystems);
        EngineSystems.setLayout(EngineSystemsLayout);
        EngineSystemsLayout.setHorizontalGroup(
            EngineSystemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EngineSystemsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 748, Short.MAX_VALUE)
                .addContainerGap())
        );
        EngineSystemsLayout.setVerticalGroup(
            EngineSystemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EngineSystemsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                .addContainerGap())
        );

        inventoryLayeredPane1.add(EngineSystems, "card2");

        PowerTansmissionSystems.setBackground(new java.awt.Color(223, 223, 223));

        jTable8.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jTable8.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UPC", "Category no.", "Brand", "Type", "Product Name", "Quantity", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(jTable8);

        javax.swing.GroupLayout PowerTansmissionSystemsLayout = new javax.swing.GroupLayout(PowerTansmissionSystems);
        PowerTansmissionSystems.setLayout(PowerTansmissionSystemsLayout);
        PowerTansmissionSystemsLayout.setHorizontalGroup(
            PowerTansmissionSystemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PowerTansmissionSystemsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 748, Short.MAX_VALUE)
                .addContainerGap())
        );
        PowerTansmissionSystemsLayout.setVerticalGroup(
            PowerTansmissionSystemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PowerTansmissionSystemsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                .addContainerGap())
        );

        inventoryLayeredPane1.add(PowerTansmissionSystems, "card2");

        inventoryMain.add(inventoryLayeredPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(323, 175, 760, 440));

        inventoryLogo1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventoryproject/logo.png"))); // NOI18N
        inventoryMain.add(inventoryLogo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 10, -1, -1));

        inventoryBackBtn1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventoryproject/back button.png"))); // NOI18N
        inventoryBackBtn1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inventoryBackBtn1MouseClicked(evt);
            }
        });
        inventoryMain.add(inventoryBackBtn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(38, 83, -1, -1));

        seeDetails.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        seeDetails.setText("View Details");
        seeDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seeDetailsActionPerformed(evt);
            }
        });
        inventoryMain.add(seeDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 360, 106, 40));

        save.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        inventoryMain.add(save, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 420, 106, 40));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventoryproject/redWallpaperrr.png"))); // NOI18N
        inventoryMain.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-90, 0, 410, 650));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventoryproject/tires bg.png"))); // NOI18N
        inventoryMain.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, -20, 820, 690));

        getContentPane().add(inventoryMain, "card2");

        inventoryAdd.setBackground(new java.awt.Color(223, 223, 223));
        inventoryAdd.setToolTipText("");
        inventoryAdd.setMinimumSize(new java.awt.Dimension(1098, 651));
        inventoryAdd.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        inventoryAddBackBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventoryproject/back button.png"))); // NOI18N
        inventoryAddBackBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inventoryAddBackBtnMouseClicked(evt);
            }
        });
        inventoryAdd.add(inventoryAddBackBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(236, 67, -1, -1));

        inventoryAddLbl.setFont(new java.awt.Font("Poppins", 1, 20)); // NOI18N
        inventoryAddLbl.setForeground(new java.awt.Color(255, 255, 255));
        inventoryAddLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        inventoryAddLbl.setText("Add Product");
        inventoryAdd.add(inventoryAddLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(469, 67, 210, -1));

        inventoryAddBrandNameLbl.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryAddBrandNameLbl.setForeground(new java.awt.Color(255, 255, 255));
        inventoryAddBrandNameLbl.setText("Enter brand name:");
        inventoryAdd.add(inventoryAddBrandNameLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(325, 246, 132, -1));

        inventoryAddBrandNameTxtField.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryAdd.add(inventoryAddBrandNameTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(469, 243, 412, -1));

        inventoryAddQuantityLbl.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryAddQuantityLbl.setForeground(new java.awt.Color(255, 255, 255));
        inventoryAddQuantityLbl.setText("Enter product's quantity:");
        inventoryAdd.add(inventoryAddQuantityLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(287, 430, -1, -1));

        inventoryAddNameLbl.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryAddNameLbl.setForeground(new java.awt.Color(255, 255, 255));
        inventoryAddNameLbl.setText("Enter product's name:");
        inventoryAdd.add(inventoryAddNameLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(303, 338, -1, -1));

        inventoryAddTypeLbl.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryAddTypeLbl.setForeground(new java.awt.Color(255, 255, 255));
        inventoryAddTypeLbl.setText("Enter product's type:");
        inventoryAdd.add(inventoryAddTypeLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(314, 292, -1, -1));

        inventoryAddUPCLbl.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryAddUPCLbl.setForeground(new java.awt.Color(255, 255, 255));
        inventoryAddUPCLbl.setText("Enter product's UPC:");
        inventoryAdd.add(inventoryAddUPCLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(314, 160, 143, -1));

        inventoryAddPriceTxtField.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryAdd.add(inventoryAddPriceTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(469, 381, 412, -1));

        inventoryAddPriceLbl.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryAddPriceLbl.setForeground(new java.awt.Color(255, 255, 255));
        inventoryAddPriceLbl.setText("Enter product's price:");
        inventoryAdd.add(inventoryAddPriceLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(309, 384, -1, -1));

        inventoryAddBtn.setBackground(new java.awt.Color(189, 3, 2));
        inventoryAddBtn.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryAddBtn.setForeground(new java.awt.Color(255, 255, 255));
        inventoryAddBtn.setText("Add");
        inventoryAddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inventoryAddBtnActionPerformed(evt);
            }
        });
        inventoryAdd.add(inventoryAddBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 514, 99, 37));

        inventoryAddCategoryLbl.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryAddCategoryLbl.setForeground(new java.awt.Color(255, 255, 255));
        inventoryAddCategoryLbl.setText("Select category:");
        inventoryAdd.add(inventoryAddCategoryLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(343, 200, -1, -1));

        inventoryAddUPCTxtField.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryAdd.add(inventoryAddUPCTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(469, 157, 412, -1));

        inventoryAddCategoryComboBox.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryAddCategoryComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Engine Systems", "Body Systems", "Power-Tansmission Systems", "Vehicle Security and Safety", "Special Purpose Vechicle Parts and Accessories ", "Entertainment and Communication Systems", "Car Cares and Repair Equipment", "Vehicle Parts Manufacturing" }));
        inventoryAdd.add(inventoryAddCategoryComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(469, 197, 412, -1));

        inventoryAddQuantityTxtField.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryAdd.add(inventoryAddQuantityTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(469, 427, 412, -1));

        inventoryAddNameTxtField.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryAdd.add(inventoryAddNameTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(469, 335, 412, -1));

        inventoryAddTypeTxtField.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryAdd.add(inventoryAddTypeTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(469, 289, 412, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventoryproject/tires bg.png"))); // NOI18N
        inventoryAdd.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1100, -1));

        getContentPane().add(inventoryAdd, "card4");

        inventoryUpdate.setBackground(new java.awt.Color(223, 223, 223));
        inventoryUpdate.setToolTipText("");
        inventoryUpdate.setMinimumSize(new java.awt.Dimension(1098, 651));
        inventoryUpdate.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        inventoryUpdateBackBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventoryproject/back button.png"))); // NOI18N
        inventoryUpdateBackBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inventoryUpdateBackBtnMouseClicked(evt);
            }
        });
        inventoryUpdate.add(inventoryUpdateBackBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 80, -1, -1));

        inventoryUpdateLbl.setFont(new java.awt.Font("Poppins", 1, 20)); // NOI18N
        inventoryUpdateLbl.setForeground(new java.awt.Color(255, 255, 255));
        inventoryUpdateLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        inventoryUpdateLbl.setText("Update Product");
        inventoryUpdate.add(inventoryUpdateLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 83, 210, -1));

        inventoryUpdateBrandNameLbl.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryUpdateBrandNameLbl.setForeground(new java.awt.Color(255, 255, 255));
        inventoryUpdateBrandNameLbl.setText("Enter brand name:");
        inventoryUpdate.add(inventoryUpdateBrandNameLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 240, 132, -1));

        inventoryUpdateBrandNameTxtField.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryUpdate.add(inventoryUpdateBrandNameTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 240, 412, -1));

        inventoryUpdateQuantityLbl.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryUpdateQuantityLbl.setForeground(new java.awt.Color(255, 255, 255));
        inventoryUpdateQuantityLbl.setText("Enter of quantity the product:");
        inventoryUpdate.add(inventoryUpdateQuantityLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 440, -1, -1));

        inventoryUpdateNameLbl.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryUpdateNameLbl.setForeground(new java.awt.Color(255, 255, 255));
        inventoryUpdateNameLbl.setText("Enter product's name:");
        inventoryUpdate.add(inventoryUpdateNameLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 340, -1, -1));

        inventoryUpdateTypeLbl.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryUpdateTypeLbl.setForeground(new java.awt.Color(255, 255, 255));
        inventoryUpdateTypeLbl.setText("Enter product's type:");
        inventoryUpdate.add(inventoryUpdateTypeLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 290, -1, 20));

        inventoryUpdateUPCLbl.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryUpdateUPCLbl.setForeground(new java.awt.Color(255, 255, 255));
        inventoryUpdateUPCLbl.setText("Enter product's UPC:");
        inventoryUpdate.add(inventoryUpdateUPCLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 160, 143, -1));

        inventoryUpdatePriceTxtField.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryUpdatePriceTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inventoryUpdatePriceTxtFieldActionPerformed(evt);
            }
        });
        inventoryUpdate.add(inventoryUpdatePriceTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 390, 412, -1));

        inventoryUpdatePriceLbl.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryUpdatePriceLbl.setForeground(new java.awt.Color(255, 255, 255));
        inventoryUpdatePriceLbl.setText("Enter product's price:");
        inventoryUpdate.add(inventoryUpdatePriceLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 390, -1, -1));

        inventoryUpdateBtn.setBackground(new java.awt.Color(189, 3, 2));
        inventoryUpdateBtn.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryUpdateBtn.setForeground(new java.awt.Color(255, 255, 255));
        inventoryUpdateBtn.setText("Update");
        inventoryUpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inventoryUpdateBtnActionPerformed(evt);
            }
        });
        inventoryUpdate.add(inventoryUpdateBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 530, 99, 37));

        inventoryUpdateCategoryLbl.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryUpdateCategoryLbl.setForeground(new java.awt.Color(255, 255, 255));
        inventoryUpdateCategoryLbl.setText("Select category:");
        inventoryUpdate.add(inventoryUpdateCategoryLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 200, -1, -1));

        inventoryUpdateUPCTxtField.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryUpdate.add(inventoryUpdateUPCTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 160, 412, -1));

        inventoryUpdateCategoryComboBox.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryUpdateCategoryComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Engine Systems", "Body Systems", "Power-Tansmission Systems", "Vehicle Security and Safety", "Special Purpose Vechicle Parts and Accessories ", "Entertainment and Communication Systems", "Car Cares and Repair Equipment", "Vehicle Parts Manufacturing" }));
        inventoryUpdate.add(inventoryUpdateCategoryComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 200, 412, -1));

        inventoryUpdateQuantityTxtField.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryUpdateQuantityTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inventoryUpdateQuantityTxtFieldActionPerformed(evt);
            }
        });
        inventoryUpdate.add(inventoryUpdateQuantityTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 440, 412, -1));

        inventoryUpdateUpdateNameTxtField.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryUpdateUpdateNameTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inventoryUpdateUpdateNameTxtFieldActionPerformed(evt);
            }
        });
        inventoryUpdate.add(inventoryUpdateUpdateNameTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 340, 412, -1));

        inventoryUpdateTypeTxtField.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryUpdateTypeTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inventoryUpdateTypeTxtFieldActionPerformed(evt);
            }
        });
        inventoryUpdate.add(inventoryUpdateTypeTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 290, 412, -1));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventoryproject/tires bg.png"))); // NOI18N
        inventoryUpdate.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getContentPane().add(inventoryUpdate, "card5");

        seeProductDetails.setBackground(new java.awt.Color(223, 223, 223));
        seeProductDetails.setToolTipText("");
        seeProductDetails.setMinimumSize(new java.awt.Dimension(1098, 651));
        seeProductDetails.setPreferredSize(new java.awt.Dimension(1098, 651));
        seeProductDetails.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        inventoryAddBackBtn1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventoryproject/back button.png"))); // NOI18N
        inventoryAddBackBtn1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inventoryAddBackBtn1MouseClicked(evt);
            }
        });
        seeProductDetails.add(inventoryAddBackBtn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 70, -1, -1));

        inventoryAddLbl1.setFont(new java.awt.Font("Poppins", 1, 20)); // NOI18N
        inventoryAddLbl1.setForeground(new java.awt.Color(255, 255, 255));
        inventoryAddLbl1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        inventoryAddLbl1.setText("Product's Details");
        seeProductDetails.add(inventoryAddLbl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(469, 83, 210, -1));

        inventoryAddBrandNameLbl1.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryAddBrandNameLbl1.setForeground(new java.awt.Color(255, 255, 255));
        inventoryAddBrandNameLbl1.setText("Brand Name:");
        seeProductDetails.add(inventoryAddBrandNameLbl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 280, -1, -1));

        inventoryAddQuantityLbl1.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryAddQuantityLbl1.setForeground(new java.awt.Color(255, 255, 255));
        inventoryAddQuantityLbl1.setText("Product's quantity:");
        seeProductDetails.add(inventoryAddQuantityLbl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 440, -1, 19));

        inventoryAddNameLbl1.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryAddNameLbl1.setForeground(new java.awt.Color(255, 255, 255));
        inventoryAddNameLbl1.setText("Product's name:");
        seeProductDetails.add(inventoryAddNameLbl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 360, -1, -1));

        inventoryAddTypeLbl1.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryAddTypeLbl1.setForeground(new java.awt.Color(255, 255, 255));
        inventoryAddTypeLbl1.setText("Product's type:");
        seeProductDetails.add(inventoryAddTypeLbl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 320, -1, -1));

        inventoryAddUPCLbl1.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryAddUPCLbl1.setForeground(new java.awt.Color(255, 255, 255));
        inventoryAddUPCLbl1.setText("UPC:");
        seeProductDetails.add(inventoryAddUPCLbl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 200, -1, -1));

        inventoryAddPriceLbl1.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryAddPriceLbl1.setForeground(new java.awt.Color(255, 255, 255));
        inventoryAddPriceLbl1.setText("Product's price:");
        seeProductDetails.add(inventoryAddPriceLbl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 400, -1, -1));

        inventoryAddCategoryLbl1.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        inventoryAddCategoryLbl1.setForeground(new java.awt.Color(255, 255, 255));
        inventoryAddCategoryLbl1.setText("Category:");
        seeProductDetails.add(inventoryAddCategoryLbl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 240, -1, -1));

        seeUPC.setEditable(false);
        seeUPC.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        seeUPC.setFocusable(false);
        jScrollPane1.setViewportView(seeUPC);

        seeProductDetails.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 200, 407, -1));

        seeBrandName.setEditable(false);
        seeBrandName.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        seeBrandName.setFocusable(false);
        jScrollPane3.setViewportView(seeBrandName);

        seeProductDetails.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 280, 407, -1));

        seeType.setEditable(false);
        seeType.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        seeType.setFocusable(false);
        jScrollPane5.setViewportView(seeType);

        seeProductDetails.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 320, 407, -1));

        seeName.setEditable(false);
        seeName.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        seeName.setFocusable(false);
        jScrollPane17.setViewportView(seeName);

        seeProductDetails.add(jScrollPane17, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 360, 407, -1));

        seePrice.setEditable(false);
        seePrice.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        seePrice.setFocusable(false);
        jScrollPane18.setViewportView(seePrice);

        seeProductDetails.add(jScrollPane18, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 400, 407, -1));

        seeAmount.setEditable(false);
        seeAmount.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        seeAmount.setFocusable(false);
        jScrollPane19.setViewportView(seeAmount);

        seeProductDetails.add(jScrollPane19, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 440, 407, -1));

        seeCategory.setEditable(false);
        seeCategory.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        seeCategory.setFocusable(false);
        jScrollPane2.setViewportView(seeCategory);

        seeProductDetails.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 240, 407, -1));

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventoryproject/tires bg.png"))); // NOI18N
        seeProductDetails.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getContentPane().add(seeProductDetails, "card4");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //this method will set the value of the textfields to blank
    private void setJTextBlank(){
        inventoryAddUPCTxtField.setText("");
        inventoryAddCategoryComboBox.setSelectedIndex(0);
        inventoryAddBrandNameTxtField.setText("");
        inventoryAddTypeTxtField.setText("");
        inventoryAddNameTxtField.setText("");
        inventoryAddPriceTxtField.setText("");
        inventoryAddQuantityTxtField.setText("");
    }
    
    //this is for the addition of a new product in the stock
    private void inventoryAddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inventoryAddBtnActionPerformed
        try{
            if(JOptionPane.showConfirmDialog(null, "Continue?", "Confirmation", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE) == 0){//confirmation prompts
                UPC = Long.parseLong(inventoryAddUPCTxtField.getText());    //gets the datas entered by the user in the textfield
                category = (byte) inventoryAddCategoryComboBox.getSelectedIndex();
                brandName = inventoryAddBrandNameTxtField.getText();
                type = inventoryAddTypeTxtField.getText();
                name = inventoryAddNameTxtField.getText();
                price = Double.parseDouble(inventoryAddPriceTxtField.getText());
                amount = Long.parseLong(inventoryAddQuantityTxtField.getText());

                if(price <= 0)  //if the price is zero or lesser
                    JOptionPane.showMessageDialog(null, "Invalid Price Input!", "Warning", JOptionPane.WARNING_MESSAGE);
                else if(amount <= 0)    //if the amount is zero or lesser
                    JOptionPane.showMessageDialog(null, "Invalid Amount Input!", "Warning", JOptionPane.WARNING_MESSAGE);
                else{   //if the input is valid
                    if(processProductDataObject.same(UPC))  //checks if there is an existind product with the same UPC
                        JOptionPane.showMessageDialog(null, "Product with the same UPC exist!", "Warning", JOptionPane.WARNING_MESSAGE);
                    else if(UPC == 0 || brandName.equals("") || type.equals("") || name.equals("") || price == 0 || amount == 0)    //if the user didn't fill up the textfield properly
                        JOptionPane.showMessageDialog(null, "Please fillup the following or enter a valid input!", "Warning", JOptionPane.ERROR_MESSAGE);
                    else{   //adds the new product
                        processProductDataObject.addProduct( processProductDataObject.products.get(category),UPC, category, brandName, type, name, price, amount);
                        inventorySearchUPCTxtField1.setText("");    //set the text in the inventory search to blank
                        setTheAllTables();  //update the tables
                        inventoryAdd.setVisible(false); //go to the main inventory panel
                        inventoryMain.setVisible(true);
                        setJTextBlank();    //set all the jtextfield to blank
                    }
                }
            }
            else
                JOptionPane.showMessageDialog(null, "The process has been cancelled!");
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(rootPane, "Error: Please enter a numerical value in the Item Number, Price, and Amount input field. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_inventoryAddBtnActionPerformed

    //this is for updating the product's informations
    private void inventoryUpdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inventoryUpdateBtnActionPerformed
        //will ask the user if the decision is final and he/she wants to change the UPC
        if(JOptionPane.showConfirmDialog(null, "Continue?", "Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == 0){ //prompt confirmation
            try{
                long newUPC = Long.parseLong(inventoryUpdateUPCTxtField.getText()); //get all data's new informations
                byte newCategory = Byte.parseByte("" + inventoryUpdateCategoryComboBox.getSelectedIndex());
                brandName = inventoryUpdateBrandNameTxtField.getText();
                type = inventoryUpdateTypeTxtField.getText();
                name = inventoryUpdateUpdateNameTxtField.getText();
                price = Double.parseDouble(inventoryUpdatePriceTxtField.getText());
                amount = Long.parseLong(inventoryUpdateQuantityTxtField.getText());

                if(amount > 0 && price > 0){    //if the amount is valid
                    if(UPC != newUPC || category != newCategory){   //this determines if the user changes the UPC or the category
                        processProductDataObject.processDelete(category, UPC);  //removes the current location of the product and add it to its new location
                        processProductDataObject.addProduct(processProductDataObject.products.get(newCategory) , newUPC, newCategory, brandName, type, name, price, amount);
                    }
                    else    //save the new information
                        processProductDataObject.updateInformation(processProductDataObject.products.get(category), UPC, brandName, type, name, amount, price);
                    inventorySearchUPCTxtField1.setText("");    //set the search text field to blank
                    setTheAllTables();  //update the table
                    inventoryUpdate.setVisible(false);  //go back to the main panel of the inventory
                    inventoryMain.setVisible(true);
                }
                else if(amount <= 0)
                    JOptionPane.showMessageDialog(null, "Invalid Amount Input!", "Warning", JOptionPane.ERROR_MESSAGE);
                else
                    JOptionPane.showMessageDialog(null, "Invalid Price Input!", "Warning", JOptionPane.ERROR_MESSAGE);
            }catch(NumberFormatException e){
                JOptionPane.showMessageDialog(rootPane, "Error: Please enter a numerical value in the Item Number, Price, and Amount input field. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        else
            JOptionPane.showMessageDialog(null, "The update has been cancelled");   //if the user has cancelled the change in the upc, then this statement will execute
    }//GEN-LAST:event_inventoryUpdateBtnActionPerformed

    //this will deliver the user to the add screen of the inventory
    private void inventoryAddBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inventoryAddBtn1ActionPerformed
        inventoryMain.setVisible(false);
        inventoryAdd.setVisible(true);
    }//GEN-LAST:event_inventoryAddBtn1ActionPerformed

    //this will return the user to the main panel of the inventory
    private void inventoryAddBackBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inventoryAddBackBtnMouseClicked
        setJTextBlank();
        inventoryAdd.setVisible(false);
        inventoryMain.setVisible(true);
    }//GEN-LAST:event_inventoryAddBackBtnMouseClicked

    //this will return the user to the main menu panel of the admin
    private void inventoryBackBtn1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inventoryBackBtn1MouseClicked
        dispose();
        MainMenuAdmin admin = new MainMenuAdmin();
        admin.setVisible(true);
    }//GEN-LAST:event_inventoryBackBtn1MouseClicked

    //this will determine where is the product in the table and will delete it based on the category it is present
    private void inventoryDeleteBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inventoryDeleteBtn1ActionPerformed
        switch(inventoryCategoryComboBox1.getSelectedIndex()){  //will get the selected index in the combobox
            case 0 -> deleteProductInTable(jTable6);
            case 1 -> deleteProductInTable(jTable16);
            case 2 -> deleteProductInTable(jTable7);
            case 3 -> deleteProductInTable(jTable8);
            case 4 -> deleteProductInTable(jTable9);
            case 5 -> deleteProductInTable(jTable10);
            case 6 -> deleteProductInTable(jTable13);
            case 7 -> deleteProductInTable(jTable14);
            case 8 -> deleteProductInTable(jTable15);
        }
    }//GEN-LAST:event_inventoryDeleteBtn1ActionPerformed

    //this will determine where is the product in the table and will view its details based in the category it is present
    private void seeDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seeDetailsActionPerformed
        switch(inventoryCategoryComboBox1.getSelectedIndex()){
            case 0 -> seeDetails(jTable6);
            case 1 -> seeDetails(jTable16);
            case 2 -> seeDetails(jTable7);
            case 3 -> seeDetails(jTable8);
            case 4 -> seeDetails(jTable9);
            case 5 -> seeDetails(jTable10);
            case 6 -> seeDetails(jTable13);
            case 7 -> seeDetails(jTable14);
            case 8 -> seeDetails(jTable15);
        }
    }//GEN-LAST:event_seeDetailsActionPerformed

    //this will let the user view the details of the product selected
    private void seeDetails(JTable table){
        int[] selectedIndex = table.getSelectedRows();  //retrieve the selected index of the product
        
        if(selectedIndex.length == 0)   //if the user didn't sellect anything
            JOptionPane.showMessageDialog(rootPane, "Please select product/s", "Warning", JOptionPane.ERROR_MESSAGE);
        else if(selectedIndex.length > 1)   //if the user selected items more than one
            JOptionPane.showMessageDialog(rootPane, "Please only one product/s", "Warning", JOptionPane.ERROR_MESSAGE);
        else{
            if(inventorySearchUPCTxtField1.getText().equals("")){   //outputs the details of the product   
                UPC = Long.parseLong( "" + table.getValueAt(selectedIndex[0], 0));
                category = Byte.parseByte( "" + table.getValueAt(selectedIndex[0], 1) );
                --category;
                brandName = "" + table.getValueAt(selectedIndex[0], 2);
                type = "" + table.getValueAt(selectedIndex[0], 3);
                name = "" + table.getValueAt(selectedIndex[0], 4);
                amount = Long.parseLong("" + table.getValueAt(selectedIndex[0], 5));
                price = Double.parseDouble("" + table.getValueAt(selectedIndex[0], 6));
            }
            seeUPC.setText("" + UPC);   //set the text in the text field area
            seeCategory.setText(revealCategory(category));
            seeBrandName.setText(brandName);
            seeType.setText(type);
            seeName.setText(name);
            seeAmount.setText("" + amount);
            seePrice.setText("" + price);
            inventoryMain.setVisible(false);    //go to the details panel of the inventory
            seeProductDetails.setVisible(true);

        }
    }
    
    //this will return the category text of the category combo box, this is used to view the category of the product
    private String revealCategory(byte category){
        return switch(category){    //will return the value of the switch case rule
            case 0 -> "Engine Systems";
            case 1 -> "Body Systems";
            case 2 -> "Power-Tansmission Systems";
            case 3 -> "Vehicle Security and Safety";
            case 4 -> "Special Purpose Vechicle Parts and Accessories ";
            case 5 -> "Entertainment and Communication Systems";
            case 6 -> "Car Cares and Repair Equipment";
            default -> "Vehicle Parts Manufacturing";
        };
    }
    
    //this will save the changes happened in the products in the stocks
    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        try{
            processProductDataObject.saveChangesAttempt();  //save changes
            dispose();  //dispose the frame
            MainMenuAdmin admin = new MainMenuAdmin();  //open the frame of the main menu admin
            admin.setVisible(true);
        }catch(IOException e){
            JOptionPane.showMessageDialog(rootPane, "An error has occured!", "Alert", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_saveActionPerformed

    //determines if the text provided is of numeric value or not using regex
    private boolean isNumeric(String str) {
      return str.matches("-?\\d+(\\.\\d+)?") && !(Integer.parseInt(str) < 0);  //match a number with optional '-' and decimal.
    }
    
    //this will execute searching of the product using product's UPC
    private void searchAll(){
        DefaultTableModel model = (DefaultTableModel) jTable6.getModel();   //sets the row of the table to zero
        model.setRowCount(0);
        for(Hashtable<Long, Product> c: processProductDataObject.products){ //this will output the products that matched the searching
            if(c.containsKey(UPC)){
                cacheDatas(c.get(UPC));  //cache the datas for future use
                String[] toBeDisplayed = {"" + c.get(UPC).getUniversalProductKey(), "" + (c.get(UPC).getCategory() + 1), c.get(UPC).getBrandName(), c.get(UPC).getType(), c.get(UPC).getName(),"" + c.get(UPC).getAmount(),"" +  + c.get(UPC).getPrice()};
                model.addRow(toBeDisplayed);    //add the string array that contains the product infos
                break;  //break the loop as it already finds the products
            }
        }
    }
    
    //this will execute search base on the categories selected
    private void searchInCategory(){
        switch(inventoryCategoryComboBox1.getSelectedIndex()){  //will determine the products location based on the categories
            case 1 -> seeCategoryProductInTable(jTable16);
            case 2 -> seeCategoryProductInTable(jTable7);
            case 3 -> seeCategoryProductInTable(jTable8);
            case 4 -> seeCategoryProductInTable(jTable9);
            case 5 -> seeCategoryProductInTable(jTable10);
            case 6 -> seeCategoryProductInTable(jTable13);
            case 7 -> seeCategoryProductInTable(jTable14);
            case 8 -> seeCategoryProductInTable(jTable15);
        }
    }
    
    //will set the table according to the UPC used and based on the category
    private void seeCategoryProductInTable(JTable table){
        Hashtable<Long, Product> product = processProductDataObject.products.get(inventoryCategoryComboBox1.getSelectedIndex() - 1);    //gets the hashtable of a certain category based on the selected category
        DefaultTableModel model = (DefaultTableModel) table.getModel(); // will get the model of a certain table and sets its row to zero
        model.setRowCount(0);
        if(product.containsKey(UPC)){   //add the certain product info to the table if it exist on the products' stock
            cacheDatas(product.get(UPC));    //cache product's data for future use
            String[] toBeDisplayed = {"" + product.get(UPC).getUniversalProductKey(), "" + (product.get(UPC).getCategory() + 1), product.get(UPC).getBrandName(), product.get(UPC).getType(), product.get(UPC).getName(), "" + product.get(UPC).getAmount(), "" + product.get(UPC).getPrice()};
            model.addRow(toBeDisplayed);    //add it to the table
        }
    }
    
    //cache data of the product
    private void cacheDatas(Product product){
        category = product.getCategory();
        brandName = product.getBrandName();
        type = product.getType();
        name = product.getName();
        amount = product.getAmount();
        price = product.getPrice();
    }
    
    //update the selected product in the inventory based in the category it was in
    private void inventoryUpdateBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inventoryUpdateBtn1ActionPerformed
        switch(inventoryCategoryComboBox1.getSelectedIndex()){  //determine the category of the product and send its tables
            case 0 -> updateProductInTable(jTable6);
            case 1 -> updateProductInTable(jTable16);
            case 2 -> updateProductInTable(jTable7);
            case 3 -> updateProductInTable(jTable8);
            case 4 -> updateProductInTable(jTable9);
            case 5 -> updateProductInTable(jTable10);
            case 6 -> updateProductInTable(jTable13);
            case 7 -> updateProductInTable(jTable14);
            case 8 -> updateProductInTable(jTable15);
        }
    }//GEN-LAST:event_inventoryUpdateBtn1ActionPerformed

    //search products using UPC
    private void inventorySearchUPCTxtField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inventorySearchUPCTxtField1ActionPerformed
        if(!inventorySearchUPCTxtField1.getText().equals("")){  //if the search bar is not empty
            if(isNumeric(inventorySearchUPCTxtField1.getText())){   //if the input is numeric
                UPC = Long.parseLong(inventorySearchUPCTxtField1.getText());    //gets the UPC value
                if(inventoryCategoryComboBox1.getSelectedIndex() == 0)  //if the selected category is 0, this means the search will be all category
                    searchAll();
                else
                    searchInCategory(); //otherwise
            }
            else
                JOptionPane.showMessageDialog(rootPane, "Please enter a valid UPC!", "Warning", JOptionPane.ERROR_MESSAGE);
        }
        else
            JOptionPane.showMessageDialog(rootPane, "Please enter UPC!", "Warning", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_inventorySearchUPCTxtField1ActionPerformed

    //will return to the main inventory panel
    private void inventoryUpdateBackBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inventoryUpdateBackBtnMouseClicked
        inventoryUpdate.setVisible(false);
        inventoryMain.setVisible(true);
    }//GEN-LAST:event_inventoryUpdateBackBtnMouseClicked

    //will return back to the main panel
    private void inventoryAddBackBtn1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inventoryAddBackBtn1MouseClicked
        inventoryUpdate.setVisible(false);
        inventoryMain.setVisible(true);
    }//GEN-LAST:event_inventoryAddBackBtn1MouseClicked

    private void inventoryCategoryComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inventoryCategoryComboBox1ActionPerformed
        if(!inventorySearchUPCTxtField1.getText().equals("")){  //if the search bar is not equals to blank
            setTheAllTables();  //sets the tables
            inventorySearchUPCTxtField1.setText("");    //set search bar to blank
        }

        all.setVisible(false);  //set all the tables' visibility to false
        EngineSystems.setVisible(false);
        BodySystems.setVisible(false);
        PowerTansmissionSystems.setVisible(false);
        VehicleSecurityAndSafety.setVisible(false);
        SpecialPurposeVechiclePartsAndAccessories.setVisible(false);
        EntertainmentAndCommunicationSystems.setVisible(false);
        CarCaresAndRepairEquipment.setVisible(false);
        VehiclePartsManufacturing.setVisible(false);

        switch(inventoryCategoryComboBox1.getSelectedIndex()){  //only the selected table will be visible to the user
            case 0 -> all.setVisible(true);
            case 1 -> EngineSystems.setVisible(true);
            case 2 -> BodySystems.setVisible(true);
            case 3 -> PowerTansmissionSystems.setVisible(true);
            case 4 -> VehicleSecurityAndSafety.setVisible(true);
            case 5 -> SpecialPurposeVechiclePartsAndAccessories.setVisible(true);
            case 6 -> EntertainmentAndCommunicationSystems.setVisible(true);
            case 7 -> CarCaresAndRepairEquipment.setVisible(true);
            case 8 -> VehiclePartsManufacturing.setVisible(true);
        }
    }//GEN-LAST:event_inventoryCategoryComboBox1ActionPerformed

    private void inventoryUpdateUpdateNameTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inventoryUpdateUpdateNameTxtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inventoryUpdateUpdateNameTxtFieldActionPerformed

    private void inventoryUpdateQuantityTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inventoryUpdateQuantityTxtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inventoryUpdateQuantityTxtFieldActionPerformed

    private void inventoryUpdatePriceTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inventoryUpdatePriceTxtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inventoryUpdatePriceTxtFieldActionPerformed

    private void inventoryUpdateTypeTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inventoryUpdateTypeTxtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inventoryUpdateTypeTxtFieldActionPerformed

    //prepare the update panel for the product
    private void updateProductInTable(JTable table){
        int[] selectedIndex = table.getSelectedRows();  //get the index of the selected row
        
        if(selectedIndex.length == 0)   //if the user doesn't select a certain items on the table
            JOptionPane.showMessageDialog(rootPane, "Please select product/s", "Warning", JOptionPane.ERROR_MESSAGE);
        else if(selectedIndex.length > 1)   //if the user has selected more than one items
            JOptionPane.showMessageDialog(rootPane, "Please only one product/s", "Warning", JOptionPane.ERROR_MESSAGE);
        else{
            if(inventorySearchUPCTxtField1.getText().equals("")){   //if tbe search bar is blank
                UPC = Long.parseLong( "" + table.getValueAt(selectedIndex[0], 0));  //get all the product info in the table
                category = Byte.parseByte( "" + table.getValueAt(selectedIndex[0], 1) );
                --category;
                brandName = "" + table.getValueAt(selectedIndex[0], 2);
                type = "" + table.getValueAt(selectedIndex[0], 3);
                name = "" + table.getValueAt(selectedIndex[0], 4);
                amount = Long.parseLong("" + table.getValueAt(selectedIndex[0], 5));
                price = Double.parseDouble("" + table.getValueAt(selectedIndex[0], 6));
            }
            inventoryUpdateUPCTxtField.setText("" + UPC);   //set the infos to the textfields as the existing info
            inventoryUpdateCategoryComboBox.setSelectedIndex(category);
            inventoryUpdateBrandNameTxtField.setText(brandName);
            inventoryUpdateTypeTxtField.setText(type);
            inventoryUpdateUpdateNameTxtField.setText(name);
            inventoryUpdateQuantityTxtField.setText("" + amount);
            inventoryUpdatePriceTxtField.setText("" + price);
            inventoryMain.setVisible(false);
            inventoryUpdate.setVisible(true);
        }
    }
    
    //deletes the product in the inventory
    private void deleteProductInTable(JTable table){
        int[] selectedIndex = table.getSelectedRows();  //get all the idexes of the selected products
        if(selectedIndex.length == 0)   //if the user does not select any products in the table
            JOptionPane.showMessageDialog(rootPane, "Please select product/s", "Warning", JOptionPane.ERROR_MESSAGE);
        else{
            if(JOptionPane.showConfirmDialog(rootPane, "Continue?", "Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == 0){ //prompt confirm
                for(int i : selectedIndex){ // iterate while deleting the products
                    if(inventorySearchUPCTxtField1.getText().equals("")){
                        UPC = Long.parseLong( "" + table.getValueAt(i, 0));
                        category = Byte.parseByte( "" + table.getValueAt(i, 1) );
                        --category;
                    }
                    processProductDataObject.processDelete(category, UPC);  //delete the product
                }
                setTheAllTables();  //update table
                inventorySearchUPCTxtField1.setText("");    //set to blank
                JOptionPane.showMessageDialog(rootPane, "Delete Successfully!");
            }
            else
                JOptionPane.showMessageDialog(rootPane, "Operation has been cancelled!");
        }
    }
    //for centering the the window
    private void centerWindow(Window w)
    {
    Toolkit tk = Toolkit.getDefaultToolkit();
    Dimension d = tk.getScreenSize();
    setLocation((d.width-w.getWidth())/2,
    (d.height-w.getHeight())/2);
    }

   
    //set all the tables' row to zero
    private void setToNull(){
        DefaultTableModel model = (DefaultTableModel) jTable6.getModel();
        model.setRowCount(0);
        model = (DefaultTableModel) jTable16.getModel();
        model.setRowCount(0);
        model = (DefaultTableModel) jTable7.getModel();
        model.setRowCount(0);
        model = (DefaultTableModel) jTable8.getModel();
        model.setRowCount(0);
        model = (DefaultTableModel) jTable9.getModel();
        model.setRowCount(0);
        model = (DefaultTableModel) jTable10.getModel();
        model.setRowCount(0);
        model = (DefaultTableModel) jTable13.getModel();
        model.setRowCount(0);
        model = (DefaultTableModel) jTable14.getModel();
        model.setRowCount(0);
        model = (DefaultTableModel) jTable15.getModel();
        model.setRowCount(0);
    }
    
    //---------------setTables---------------------------------------
    public void setTheAllTables(){
        setToNull();
        for(Hashtable<Long, Product> c : processProductDataObject.products){
            for(long e : c.keySet()){
                UPC = c.get(e).getUniversalProductKey();
                category = c.get(e).getCategory();
                brandName = c.get(e).getBrandName();
                type = c.get(e).getType();
                name = c.get(e).getName();
                price = c.get(e).getPrice();
                amount = c.get(e).getAmount();
                
                ++category;
                
                DefaultTableModel model = (DefaultTableModel) jTable6.getModel();
                String[] list = {"" + UPC, "" + category, brandName, type, name, "" + amount, "" + price};
                model.addRow(list);
                
                switch(c.get(e).getCategory()){
                    case 0 -> {
                        model = (DefaultTableModel) jTable16.getModel();
                    }
                    case 1 -> {
                        model = (DefaultTableModel) jTable7.getModel();
                    }
                    case 2 -> {
                        model = (DefaultTableModel) jTable8.getModel();
                    }
                    case 3 -> {
                        model = (DefaultTableModel) jTable9.getModel();
                    }
                    case 4 -> {
                        model = (DefaultTableModel) jTable10.getModel();
                    }
                    case 5 -> {
                        model = (DefaultTableModel) jTable13.getModel();
                    }
                    case 6 -> {
                        model = (DefaultTableModel) jTable14.getModel();
                    }
                    case 7 -> {
                        model = (DefaultTableModel) jTable15.getModel();
                    }
                }
                model.addRow(list);
            }
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Inventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Inventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Inventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Inventory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BodySystems;
    private javax.swing.JPanel CarCaresAndRepairEquipment;
    private javax.swing.JPanel EngineSystems;
    private javax.swing.JPanel EntertainmentAndCommunicationSystems;
    private javax.swing.JPanel PowerTansmissionSystems;
    private javax.swing.JPanel SpecialPurposeVechiclePartsAndAccessories;
    private javax.swing.JPanel VehiclePartsManufacturing;
    private javax.swing.JPanel VehicleSecurityAndSafety;
    private javax.swing.JPanel all;
    private javax.swing.JPanel inventoryAdd;
    private javax.swing.JLabel inventoryAddBackBtn;
    private javax.swing.JLabel inventoryAddBackBtn1;
    private javax.swing.JLabel inventoryAddBrandNameLbl;
    private javax.swing.JLabel inventoryAddBrandNameLbl1;
    private javax.swing.JTextField inventoryAddBrandNameTxtField;
    private javax.swing.JButton inventoryAddBtn;
    private javax.swing.JButton inventoryAddBtn1;
    private javax.swing.JComboBox<String> inventoryAddCategoryComboBox;
    private javax.swing.JLabel inventoryAddCategoryLbl;
    private javax.swing.JLabel inventoryAddCategoryLbl1;
    private javax.swing.JLabel inventoryAddLbl;
    private javax.swing.JLabel inventoryAddLbl1;
    private javax.swing.JLabel inventoryAddNameLbl;
    private javax.swing.JLabel inventoryAddNameLbl1;
    private javax.swing.JTextField inventoryAddNameTxtField;
    private javax.swing.JLabel inventoryAddPriceLbl;
    private javax.swing.JLabel inventoryAddPriceLbl1;
    private javax.swing.JTextField inventoryAddPriceTxtField;
    private javax.swing.JLabel inventoryAddQuantityLbl;
    private javax.swing.JLabel inventoryAddQuantityLbl1;
    private javax.swing.JTextField inventoryAddQuantityTxtField;
    private javax.swing.JLabel inventoryAddTypeLbl;
    private javax.swing.JLabel inventoryAddTypeLbl1;
    private javax.swing.JTextField inventoryAddTypeTxtField;
    private javax.swing.JLabel inventoryAddUPCLbl;
    private javax.swing.JLabel inventoryAddUPCLbl1;
    private javax.swing.JTextField inventoryAddUPCTxtField;
    private javax.swing.JLabel inventoryBackBtn1;
    private javax.swing.JComboBox<String> inventoryCategoryComboBox1;
    private javax.swing.JButton inventoryDeleteBtn1;
    private javax.swing.JLayeredPane inventoryLayeredPane1;
    private javax.swing.JLabel inventoryLbl1;
    private javax.swing.JLabel inventoryLogo1;
    private javax.swing.JPanel inventoryMain;
    private javax.swing.JLabel inventorySearchUPCLbl1;
    private javax.swing.JTextField inventorySearchUPCTxtField1;
    private javax.swing.JPanel inventoryUpdate;
    private javax.swing.JLabel inventoryUpdateBackBtn;
    private javax.swing.JLabel inventoryUpdateBrandNameLbl;
    private javax.swing.JTextField inventoryUpdateBrandNameTxtField;
    private javax.swing.JButton inventoryUpdateBtn;
    private javax.swing.JButton inventoryUpdateBtn1;
    private javax.swing.JComboBox<String> inventoryUpdateCategoryComboBox;
    private javax.swing.JLabel inventoryUpdateCategoryLbl;
    private javax.swing.JLabel inventoryUpdateLbl;
    private javax.swing.JLabel inventoryUpdateNameLbl;
    private javax.swing.JLabel inventoryUpdatePriceLbl;
    private javax.swing.JTextField inventoryUpdatePriceTxtField;
    private javax.swing.JLabel inventoryUpdateQuantityLbl;
    private javax.swing.JTextField inventoryUpdateQuantityTxtField;
    private javax.swing.JLabel inventoryUpdateTypeLbl;
    private javax.swing.JTextField inventoryUpdateTypeTxtField;
    private javax.swing.JLabel inventoryUpdateUPCLbl;
    private javax.swing.JTextField inventoryUpdateUPCTxtField;
    private javax.swing.JTextField inventoryUpdateUpdateNameTxtField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTable jTable10;
    private javax.swing.JTable jTable13;
    private javax.swing.JTable jTable14;
    private javax.swing.JTable jTable15;
    private javax.swing.JTable jTable16;
    private javax.swing.JTable jTable6;
    private javax.swing.JTable jTable7;
    private javax.swing.JTable jTable8;
    private javax.swing.JTable jTable9;
    private javax.swing.JButton save;
    private javax.swing.JTextPane seeAmount;
    private javax.swing.JTextPane seeBrandName;
    private javax.swing.JTextPane seeCategory;
    private javax.swing.JButton seeDetails;
    private javax.swing.JTextPane seeName;
    private javax.swing.JTextPane seePrice;
    private javax.swing.JPanel seeProductDetails;
    private javax.swing.JTextPane seeType;
    private javax.swing.JTextPane seeUPC;
    // End of variables declaration//GEN-END:variables
}
